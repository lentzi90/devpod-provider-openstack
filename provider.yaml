name: openstack
version: v0.0.1
description: Devpod provider for OpenStack
icon: https://object-storage-ca-ymq-1.vexxhost.net/swift/v1/6e4619c416ff4bd19e1c087f27a43eea/www-images-prod/openstack-logo/OpenStack-Logo-Mark.png
options:
  # Options for the provider, DevPod will pass these as
  # ENV Variables when calling the provider
  OS_CLOUD:
    description: "The cloud to use from clouds.yaml"
    required: true
  NETWORK:
    description: "The network ID to connect the server to"
    required: true
  FLAVOR:
    description: "The openstack flavor to use"
    default: c4m4
    required: false
    suggestions:
    - c4m4
    - c1m2-est
    - c4m12-est
    - c4m16-est
    - c4m32-est
    - c8m24-est
    - c8m32-est
  IMAGE:
    description: "The image to create the server from"
    default: Ubuntu-24.04
    required: false
  KEY_PAIR:
    description: "Name of the key pair to inject in the server"
    required: false
  SSH_USER:
    description: "User used for ssh to the machine."
    default: ubuntu
    required: false
  VOLUME_SIZE:
    description: "Boot volume size in GB. If not specified, no volume will be used."
    example: "100"
    required: false
  JUMPHOST:
    description: "Jumphost to connect through"
    default: xerces-capo-jumphost
    required: false
  AGENT_PATH:
    description: The path where to inject the DevPod agent to.
    default: /opt/devpod/agent
agent:
  path: ${AGENT_PATH}
  docker:
    install: true
  inactivityTimeout: 5m
  exec:
    shutdown: shutdown -h now
exec:
  command: |
    ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null \
        -J "${JUMPHOST}" \
        "${SSH_USER}@$(openstack server show "${MACHINE_ID}" -f json | \
        jq ".addresses.[].[0]" -r)" \
        -- "${COMMAND}"
  init: openstack versions show
  create: |
    cmd=(openstack server create --image="${IMAGE}")
    if [[ -n "${VOLUME_SIZE}" ]]; then
      cmd+=(--boot-from-volume="${VOLUME_SIZE}")
    fi
    cmd+=(--security-group=default
          --network="${NETWORK}"
          --key-name="${KEY_PAIR}"
          --flavor="${FLAVOR}"
          --wait
          "${MACHINE_ID}")
    "${cmd[@]}"
  delete: |
    if [[ -n "${VOLUME_SIZE}" ]]; then
      volumes=$(openstack server show "${MACHINE_ID}" -f json | jq ".volumes_attached.[].id" -r)
    fi
    openstack server delete "${MACHINE_ID}" --wait
    if [[ -n "${VOLUME_SIZE}" ]]; then
      openstack volume delete ${volumes}
    fi
  start: openstack server start "${MACHINE_ID}"
  stop: openstack server stop "${MACHINE_ID}"
  status: |
    status=$(openstack server show "${MACHINE_ID}" -f json | jq -r ".status")
    if [[ -z "${status}" ]]; then
      echo NotFound
    else
      case "${status}" in
        "ACTIVE")
          echo Running
          ;;
        "SHUTOFF")
          echo Stopped
          ;;
        *)
          echo Busy
          ;;
      esac
    fi
